<?php

class MasterComposerTest extends TestCase {

  public function setUp()
	{
		// Simulate a request to a URL that is not the homepage,
		// so that the 'home' class is not added automatically
		// for all body class tests.
		$_SERVER['REQUEST_URI'] = '/foo';
	}

	/**
	 * Body Class
	 */

	public function testBodyClassKeyExistsEvenWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('body_class', $view, 'The body_class key should always be set.');
	}

	public function testBodyClassReturnsAString()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('string', gettype($view['body_class']));
	}

	public function testASingleCustomBodyClassCanBeSuppliedAsAString()
	{
		$view['body_class']  = 'aaa';
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en en-us aaa', $view['body_class']);
	}

	public function testMultipleCustomBodyClassesCanBeSuppliedAsAnArray()
	{
		$view['body_class']  = array('aaa', 'bbb', 'ccc');
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en en-us aaa bbb ccc', $view['body_class']);
	}

	public function testBodyClassWorksEvenIfSuppliedAsAnEmptyString()
	{
		$view['body_class']  = '';
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en en-us', $view['body_class']);
	}

	public function testBodyClassWorksEvenIfSuppliedAsAnEmptyArray()
	{
		$view['body_class']  = array();
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en en-us', $view['body_class']);
	}

	public function testTwoLetterLocalesAreNotAddedToBodyClassToPreventDuplicateClassWithTheLangCode()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en', $view['body_class']);
	}

	public function testHomeClassIsAddedForTheRootURL()
	{
		// Simulate a request to the homepage
		$_SERVER['REQUEST_URI'] = '/';
		$view['body_class'] = 'aaa';
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('en en-us home aaa', $view['body_class']);
	}

	/**
	 * Canonical URL
	 */

	public function testCanonicalUrlCanBeSetManuallyByTheUser()
	{
		$view['canonical'] = '/sample/path';
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('/sample/path', $view['canonical']);
	}

	public function testThatTheAutomaticCanonicalUrlForTheRootIsCorrect()
	{
		$_SERVER['REQUEST_URI'] = '/';
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('/', $view['canonical']);
	}

	public function testCanonicalUrlKeyIsSetEvenWhenNotOnTheRootAndNotManuallySetByTheUser()
	{
		$_SERVER['REQUEST_URI'] = '/sample/path';
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('canonical', $view);
	}

	public function testCanonicalUrlTrailingSlashIsRemoved()
	{
		$_SERVER['REQUEST_URI'] = '/sample/path/';
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('/sample/path', $view['canonical']);
	}

	public function testThatCanonicalUrlIsAutoGeneratedIfTheUserSetItSetManuallyToABlankString()
	{
		$view['canonical'] = '';
		$_SERVER['REQUEST_URI'] = '/sample/path/';
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('/sample/path', $view['canonical']);
	}

	/**
	 * Current Locale
	 */

	public function testCurrentLocaleKeyExists()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('current_locale', $view, 'The current_locale key should always be set.');
	}

	public function testCurrentLocaleIsInTheExpectedFormat()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$message = 'Current locale must be in one of the following formats: xx, xx-xx, or xx_xx';
		$this->assertRegExp('/^([A-Za-z]{2})$|^([A-Za-z]{2}(\-|\_)[A-Za-z]{2})$/', $view['current_locale'], $message);
	}

	/**
	 * Language Direction
	 */

	public function testLanguageDirectionKeyExists()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('language_direction', $view, 'The language_direction key should always be set.');
	}

	public function testLanguageDirectionDefaultsToLtr()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('ltr', $view['language_direction']);
	}

	public function testThatLtrIsReturnedForAnLtrLanguage()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'en-us';
		$view = $masterComposer->compose($view);
		$this->assertEquals('ltr', $view['language_direction']);
	}

	public function testThatRtlIsReturnedForAnRtlLanguage()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$masterComposer->current_locale = 'ar';
		$view = $masterComposer->compose($view);
		$this->assertEquals('rtl', $view['language_direction']);
	}

	/**
	 * Meta Description
	 */

	public function testMetaDescriptionKeyExistsEvenWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('meta_description', $view, 'The meta_description key should always be set.');
	}

	public function testMetaDescriptionReturnsAnEmptyStringWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('', $view['meta_description'], 'Meta description should default to a blank string.');
	}

	public function testMetaDescriptionSetByAUserOverridesTheDefaultBlankString()
	{
		$view = array('meta_description' => 'This is an example meta description.');
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('This is an example meta description.', $view['meta_description']);
	}

	/**
	 * Meta Robots
	 */

	public function testMetaRobotsKeyExistsEvenWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('meta_robots', $view, 'The meta_robots key should always be set.');
	}

	public function testMetaRobotsDefaultsToIndexFollowWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('index,follow', $view['meta_robots']);
	}

	public function testMetaRobotsDefaultsToIndexFollowWhenSetAsAnEmptyStringByTheUser()
	{
		$view['meta_robots'] = '';
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('index,follow', $view['meta_robots']);
	}

	/**
	 * Page Title
	 */

	public function testPageTitleKeyExistsEvenWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertArrayHasKey('page_title', $view, 'The page_title key should always be set.');
	}

	public function testPageTitleReturnsAStringEvenWhenNotSetByTheUser()
	{
		$view = array();
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('string', gettype($view['page_title']));
	}

	public function testThatAPageTitleSetToAnEmptyStringByTheUserOrADatabaseDoesNotAddAPipeSeparator()
	{
		$view['page_title'] = '';
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$this->assertEquals('', $view['page_title']);
	}

	public function testThatPageTitleReturnsWithProperFormattingWhenSetByTheUser()
	{
		$view['page_title'] = 'An Example Page Title';
		$masterComposer = new MasterComposer;
		$view = $masterComposer->compose($view);
		$message = "The page title is expected in this format: 'Page Title | [Site Name]'";
		$this->assertRegExp('/^.*\ \|\ $/', $view['page_title'], $message);
	}

}
